swagger: '2.0'
info:
  version: '1.0.0'
  title: 'BookStore'
  description: 'This is an online bookstore with books, writers, events and users'
  contact:
    email: "maildiroland@yahoo.it"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "hypermedia-app.herokuapp.com"
# host: "localhost:8080"
basePath: "/v2"

schemes:
  - "https"
  - "http"

tags:
  - name: "book"
    description: "Books available"
  - name: "event"
    description: "Events of the books"
  - name: "author"
    description: "Writers of the books"
  - name: "user"
    description: "Users subscribed"


paths:
  /books:
    get:
      tags:
        - "book"
      summary: "Books availble in the store"
      description: "List of books available in the inventory"
      operationId: "booksGET"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Collection of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
      x-swagger-router-controller: "Book"

  /books/{id}:
    get:
      tags:
        - "book"
      summary: "Find book with the book's id"
      operationId: "bookIdGET"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the book you are searching"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "operation was successful"
          schema:
            $ref: '#/definitions/Book'
      x-swagger-router-controller: "Book"

  /books/{id}/author:
    get:
      tags:
        - "book"
      summary: "Get the author of a book"
      operationId: "booksIdAuthorGET"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the book you want the author of"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: '#/definitions/Author'
      x-swagger-router-controller: "Book"

  /books/{id}/event:
    get:
      tags:
        - "book"
      summary: "Get the event of a book"
      operationId: "booksIdEventGET"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the book you want the event of"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: '#/definitions/Event'
  /books/{id}/similar:
    get:
      tags:
        - "book"
      summary: "Get similar books to the chosen one"
      operationId: "booksIdSimilarGET"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the book you want the similars of"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: '#/definitions/Book'
      x-swagger-router-controller: "Book"
  /books/themes:
    get:
      tags:
        - "book"
      summary: "Get all the themes that are present"
      operationId: "booksThemesGET"
      produces:
        - "application/json"
      responses:
        '200':
          description: "All themes"
      x-swagger-router-controller: "Book"

  /books/themes/{theme}:
    get:
      tags:
        - "book"
      summary: "Get books with a given theme"
      operationId: "booksByThemeGET"
      parameters:
        - name: "theme"
          in: "path"
          description: "theme of the book you want"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        '200':
          description: "successful operation"
      x-swagger-router-controller: "Book"

  /books/genres:
    get:
      tags:
        - "book"
      summary: "Get all the genres that are present"
      operationId: "booksGenresGET"
      produces:
        - "application/json"
      responses:
        '200':
          description: "successful operation"
      x-swagger-router-controller: "Book"

  /books/genres/{genre}:
    get:
      tags:
        - "book"
      summary: "Get books with a given genre"
      operationId: "booksByGenreGET"
      parameters:
        - name: "genre"
          in: "path"
          description: "genre of the book you want"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        '200':
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
      x-swagger-router-controller: "Book"

  /events:
    get:
      tags:
        - "event"
      summary: "Events related to a book"
      description: "List of all the events"
      operationId: "eventsGET"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Collection of events"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"

  /events/{id}:
    get:
      tags:
        - "event"
      summary: "Find event with the event's id"
      operationId: "eventIdGET"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the event you are searching"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "operation was successful"
          schema:
            $ref: '#/definitions/Event'
      x-swagger-router-controller: "Event"
  /events/{id}/book:
    get:
      tags:
        - "event"
      summary: "Get the book of an event"
      operationId: "eventsIdBookGET"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the event you want the book of"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: '#/definitions/Book'
      x-swagger-router-controller: "Event"

  /authors:
    get:
      tags:
        - "author"
      summary: "Finds authors"
      description: "Get author"
      operationId: "authorGET"
      produces:
        - "application/json"
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
      x-swagger-router-controller: "Author"
  /authors/{id}:
    get:
      tags:
        - "author"
      summary: "Find authors by ID"
      operationId: "authorIdGET"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id to get the author"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: '#/definitions/Author'
      x-swagger-router-controller: "Author"

  /authors/{id}/books:
    get:
      tags:
        - "author"
      summary: "Get the books of an author"
      operationId: "authorsIdBooksGET"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of author of which to get the books"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Book'
      x-swagger-router-controller: "Author"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Login"
      description: "Login with a form"
      operationId: "userLoginPOST"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          required: true
          type: "string"
      responses:
        200:
          description: "login status"
      x-swagger-router-controller: "User"

  /user/register:
    post:
      tags:
        - "user"
      summary: "Register"
      description: "Register into the store"
      operationId: "userRegisterPOST"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          required: true
          type: "string"
      responses:
        200:
          description: "registration status"
      x-swagger-router-controller: "User"

  /users/books:
    get:
      tags:
        - "user"
      summary: "Get the cart of the currently logged user"
      operationId: "usersIdCartGET"
      produces:
        - "application/json"
      responses:
        '200':
          description: "successful operation"
          schema:
            $ref: '#/definitions/Book'
      x-swagger-router-controller: "User"

    delete:
      tags:
        - "user"
      summary: "Delete the cart of the current logged in user"
      operationId: "usersIdCartDELETE"
      produces:
        - "application/json"
      responses:
        '200':
          description: "operation status"
      x-swagger-router-controller: "User"

  /users/books/{id}:
    delete:
      tags:
        - "user"
      summary: "Decrease the quantity of the given"
      operationId: "usersIdCartBookDELETE"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the book to decrease the qunatity"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "operation status"
      x-swagger-router-controller: "User"


  /users/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "userLogoutGET"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "logout status"
      x-swagger-router-controller: "User"

  /users/logged:
    get:
      tags:
        - "user"
      summary: "Logged user"
      description: "Gives the currently logged user"
      operationId: "userIsLoggedGET"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "logged"
      x-swagger-router-controller: "User"

  /user/addBook:
    put:
      tags:
        - "user"
      summary: "Adds a book to the user's cart"
      operationId: "userBookPUT"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "books"
          in: "formData"
          description: "id of the book that the user wants"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "operation status"
      x-swagger-router-controller: "User"
definitions:
  Book:
    type: "object"
    required:
      - "id"
      - "title"
      - "price"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      price:
        type: "number"
        format: "double"
      isbn:
        type: "string"
      genre:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      description:
        type: "string"
      publisher:
        type: "string"
      language:
        type: "string"
      release:
        type: "string"
        format: "date"
      field:
        type: "string"
      theme:
        type: "string"

    xml:
      name: "Book"
    title: "Book"
    description: "A book for sale in the store"
    example:
      id: 0
      title: "Harry Potter 1"
      price: 10
      isbn: "9780747532743"
      genre: "fantasy"
      quantity: 3
      publisher: "Bloomsbury Publishing"
      language: "english"
      release: "1997-06-26"
      field: "Wizardry"
      theme: "Harry Potter Exhibition"

  Event:
    type: "object"
    required:
      - "id"
      - "name"
      - "bookId"
      - "date"
      - "location"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      bookId:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date"
      location:
        type: "string"
      descritpion:
        type: "string"
    xml:
      name: "Event"
    title: "Event"
    description: "An event related to a book"
    example:
      id: 0
      name: "Harry Potter reunion"
      date: "2017-07-21"
      location: "London"
      description: "All together to make magic"


  Author:
    type: "object"
    required:
      - "id"
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      surname:
        type: "string"
      biography:
        type: "string"
    xml:
      name: "Author"
    description: "Book writer"
    example:
      id: 5
      name: "Joanne"
      surname: "Rowling"
      biography: "Author of the famous Harry Potter books"

  User:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
    example:
      email: "harry.potter@gmail.com"
      password: "wingardiumleviosa"